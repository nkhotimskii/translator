1. Установить python (https://www.python.org/downloads/ версия 3.11)
2. Установить pip (py -m pip install --upgrade pip)
3. Установить виртуальную среду (py -m pip install --user virtualenv)
4. Создать виртуальную среду (py -m venv env)
5. Активировать виртуальную среду (.\env\Scripts\activate)
6. Установить requirements.txt (pip install -r requirements.txt)
7. Установить VB-Audio Virtual Cable и Voicemeeter (установочные файлы в папке dist, для VB-Audio нужны права администратора)
8. Создать папку speech в директории с проектом
9. Проверить запуск программы из среды
10. Запустить pyinstaller (pyinstaller -w -F -i ico.ico --uac-admin app.py)
11. Проверить запуск через exe
12. Если будут проблемы с moviepy, то действовать согласно данному решению https://github.com/Zulko/moviepy/issues/591#issuecomment-1238783930
13. Запустить скрипт установщика (в указанных местах (OUTPUT_DIRECTORY, PATH_TO_PROJECT_FOLDER) указать нужные пути)


; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{9DB50A45-11FA-4DDB-B79B-4E94EA51144A}
AppName=Translation app
AppVersion=1.0
;AppVerName=Translation app 1.0
AppPublisher=-
AppPublisherURL=-
AppSupportURL=-
AppUpdatesURL=-
DefaultDirName={autopf}\Translation app
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=admin
OutputDir=<<OUTPUT_DIRECTORY>>
OutputBaseFilename=mysetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Dirs]
Name: "{app}\speech";

[Files]
Source: "<<PATH_TO_PROJECT_FOLDER>>\dist\app.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "<<PATH_TO_PROJECT_FOLDER>>\ico.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "<<PATH_TO_PROJECT_FOLDER>>\language_codes.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "<<PATH_TO_PROJECT_FOLDER>>\MainWindow.ui"; DestDir: "{app}"; Flags: ignoreversion
Source: "<<PATH_TO_PROJECT_FOLDER>>\dist\svcl-x64\*"; DestDir: "{app}\svcl-x64"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "<<PATH_TO_PROJECT_FOLDER>>\dist\drivers\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "<<PATH_TO_PROJECT_FOLDER>>\init.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "<<PATH_TO_PROJECT_FOLDER>>\uninstall.bat"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\.myp\OpenWithProgids"; ValueType: string; ValueName: "TranslationappFile.myp"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\TranslationappFile.myp"; ValueType: string; ValueName: ""; ValueData: "Translation app File"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\TranslationappFile.myp\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\app.exe,0"
Root: HKA; Subkey: "Software\Classes\TranslationappFile.myp\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\app.exe"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\app.exe\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\Translation app"; Filename: "{app}\app.exe"
Name: "{autodesktop}\Translation app"; Filename: "{app}\app.exe"; Tasks: desktopicon

[Code]
function InitializeSetupVB: Boolean;
begin
  Result := True;
  if RegKeyExists(HKEY_LOCAL_MACHINE,
       'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VB:VBCABLE {87459874-1236-4469}') then
  begin
    MsgBox('The application is installed already.', mbInformation, MB_OK);
    Result := False;
  end;
end;

function InitializeSetupVO: Boolean;
begin
  Result := True;
  if RegKeyExists(HKEY_LOCAL_MACHINE,
       'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\VB:Voicemeeter {17359A74-1236-5467}') then
  begin
    MsgBox('The application is installed already.', mbInformation, MB_OK);
    Result := False;
  end;
end;



[Run]
Filename: {app}\VoicemeeterSetup.exe; Check:InitializeSetupVO; Parameters: -h -i; Flags: runascurrentuser;
Filename: {app}\VBCABLE_Driver_Pack43\VBCABLE_Setup_x64.exe; Parameters: -h -i -H -n; Flags: runascurrentuser;
Filename: {app}\init.bat; Parameters: """{app}"""; Flags: runhidden runascurrentuser;
//Filename: {cmd}; Parameters: "/K """"{app}\init.bat"" {app}"""

[UninstallRun]
Filename: {app}\uninstall.bat; Parameters: """{app}"""; Flags: runhidden runascurrentuser;
Filename: {app}\VoicemeeterSetup.exe; Parameters: -h -u; Flags: runascurrentuser; 
Filename: {app}\VBCABLE_Driver_Pack43\VBCABLE_Setup_x64.exe; Parameters: -h -u -H -n ; Flags: runascurrentuser;

[UninstallDelete]
Type: filesandordirs; Name: {app};